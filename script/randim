#!/usr/bin/env perl

use v5.20;
use warnings;
use strict;
use REST::Client;
use JSON;
use LWP::UserAgent ();
use File::Path qw(make_path remove_tree);
use File::Temp ();
use File::Copy;
use IO::Prompter;

use lib 'lib';
use Image::Randim::Image;
use Image::Randim::Source;

my $req_timeout   = 20;
my $output_dir    = $ENV{'HOME'}.'/Pictures/Desktop/';
my $delete_old    = 1;
my $save_to_dir   = $ENV{'HOME'}.'/Pictures/Desktop-Saved/';

$output_dir  =~ s!/*$!/!;
$save_to_dir =~ s!/*$!/!;

if (!$output_dir || $output_dir eq '/' || $output_dir eq $ENV{'HOME'}) {
    die "Unlikely output dir $output_dir";
}
unless (-d $output_dir)  { make_path($output_dir, {verbose => 1}) };
unless (-d $save_to_dir) { make_path($save_to_dir, {verbose => 1}) };

my $quit = 0;
while (!$quit) {

    my $source = Image::Randim::Source->new;
    $source->set_random_provider;

    my $data = get_json($source->url, $req_timeout);
    my $image;
    if ($source->name eq 'Desktoppr') {
	$image = parse_desktoppr_json($data);
    } elsif ($source->name eq 'Unsplash') {
	$image = parse_unsplash_json($data);
    }

    my $img_url = $image->url;
    say "Size:    ".$image->width.'x'.$image->height;
    say "URL:     ".$image->link;
    say "Owner:   ".($image->owner || 'UNDEFINED');
    say "Img URL: ".$img_url;
    print "Getting image...";

    my $temp = File::Temp->new;
    my $ua = LWP::UserAgent->new;
    $ua->timeout($req_timeout);
    my $response = $ua->get($img_url, ':content_file' => $temp->filename);
    unless ($response->is_success) {
	warn "Error retrieving image at $img_url: ".$response->status_line." - skipping\n\n";
	next;
    }
    print "\n";
    
    my $filename = $response->filename;
    unless ($filename =~ /\.[a-zA-Z]{3,4}$/) {
	warn "Bad file extension in filename $filename - adding .jpg\n";
	$filename .= '.jpg';
    }
    if (!$filename || $filename =~ /^\./) {
	die "Bad filename $filename\n";
    }
    $image->filename($filename);

    remove_tree($output_dir, {keep_root => 1});
    move($temp->filename, $output_dir.$filename);

    my $saveit = prompt("Do you want to save this image locally?", -yesno, -single);
    if ($saveit) {
	say "saving $filename to $save_to_dir";
	copy($output_dir.$filename, $save_to_dir);
    }

    $quit = prompt("Quit?", -yesno, -single);
    print "\n";
}

sub parse_unsplash_json {
    my $data = shift;
    my $image = Image::Randim::Image->new(
	url    => $$data{'urls'}{'full'},
	id     => $$data{'id'},
	width  => $$data{'width'},
	height => $$data{'height'},
	link   => $$data{'links'}{'html'},
	);
    if (exists $$data{'user'}{'username'}) {
	$image->owner($$data{'user'}{'username'});
    }
    return $image;
}

sub parse_desktoppr_json {
    my $data = shift;
    $data = $$data{'response'};
    my $image = Image::Randim::Image->new(
	url    => $$data{'image'}{'url'},
	id     => $$data{'id'},
	width  => $$data{'width'},
	height => $$data{'height'},
	link   => $$data{'url'},
	);
    if (exists $$data{'uploader'}) {
	$image->owner($$data{'uploader'});
    }
    return $image;
}

sub get_json {
    my ($url, $timeout) = shift;
    my $client = REST::Client->new;
    $client->setTimeout($timeout);
    $client->GET($url);
    my $rc = $client->responseCode;
    if ($rc > 200) {
	die "Received a response code of $rc from $url\n";
    }
    return JSON->new->decode($client->responseContent);
}


# 
